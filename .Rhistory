Leadership$Email <- Email
Leadership
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- "x"}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
#Leadership <- cbind(Leadership_raw, Email)
Leadership$Email <- Email
Leadership
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- " "}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
#Leadership <- cbind(Leadership_raw, Email)
Leadership$Email <- Email
Leadership
print(Leadership)
paste(Leadership)
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- "- "}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
#Leadership <- cbind(Leadership_raw, Email)
Leadership$Email <- Email
Leadership[,2:3]
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- "     "}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
#Leadership <- cbind(Leadership_raw, Email)
Leadership$Email <- Email
Leadership[,2:3]
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
#Leadership <- cbind(Leadership_raw, Email)
Leadership$Email <- Email
Leadership[,2:3]
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
Leadership <- cbind(Leadership_raw, Email)
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
Leadership$Email <- Email
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
Leadership$Email <- Email
#PRINT FINAL TABLE
print(
xtable(Leadership)
,include.rownames=FALSE
,include.colnames=FALSE
,type="html"
,html.table.attributes =
""
,sanitize.text.function = getOption("xtable.sanitize.text.function", as.is)
#this DOES NOT sanitize (i.e. characters like "<" ARE NOT converted to there HTML code)
)
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Leadership_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-leadership.xlsx")
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,"Email"
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Leadership_raw$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Leadership_raw$Email <- NULL
#CREATE FINAL TABLE
Leadership$Email <- Email
#PRINT FINAL TABLE
print(
xtable(Leadership)
,include.rownames=FALSE
,include.colnames=FALSE
,type="html"
,html.table.attributes =
""
,sanitize.text.function = getOption("xtable.sanitize.text.function", as.is)
#this DOES NOT sanitize (i.e. characters like "<" ARE NOT converted to there HTML code)
)
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Alumnae_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-alumnae.xlsx")
#SORT DATA
#order the table by last name A to Z
Alumnae_ordered <- Alumnae_raw[order(Alumnae_raw$LastName),]
#NEW COLUMN; 'NAME' COLUMN
#now that the names are in alphabetical order by last name
#we want to create a single Name column, with both first and last names
#in the same Name column, we want to add the year of graduation
Name <-
paste( #this concatenates strings togehter
Alumnae_ordered$FirstName,
" ", #this isn't a vector, but it will fill in for every row needed
Alumnae_ordered$LastName,
" (",
Alumnae_ordered$Year,
")",
sep="" #separator between strings, default is a space - but we want no space
)
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Alumnae_ordered$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Alumnae_ordered$FirstName <- NULL
Alumnae_ordered$LastName <- NULL
Alumnae_ordered$Year <- NULL
Alumnae_ordered$Email <- NULL
#CREATE FINAL TABLE
Alumnae <- cbind(
Name
,Alumnae_ordered
,Email
)
#PRINT FINAL TABLE
print(
xtable(Alumnae)
,include.rownames=FALSE
,include.colnames=FALSE
,type="html"
,html.table.attributes =
""
,sanitize.text.function = getOption("xtable.sanitize.text.function", as.is)
#this DOES NOT sanitize (i.e. characters like "<" ARE NOT converted to there HTML code)
)
#only copy info between <table> </table>
library(readxl) #import data in excel doc
library(xtable) #to export html table
#IMPORT DATA
Alumnae_raw <- read_excel("~/MYE-Documents/SCHOOL/Northwestern/WIST/People/WIST-alumnae.xlsx")
#SORT DATA
#order the table by last name A to Z
Alumnae_ordered <- Alumnae_raw[order(Alumnae_raw$LastName),]
#NEW COLUMN; 'NAME' COLUMN
#now that the names are in alphabetical order by last name
#we want to create a single Name column, with both first and last names
#in the same Name column, we want to add the year of graduation
Name <-
paste( #this concatenates strings togehter
Alumnae_ordered$FirstName,
" ", #this isn't a vector, but it will fill in for every row needed
Alumnae_ordered$LastName,
" (",
Alumnae_ordered$Year,
")",
sep="" #separator between strings, default is a space - but we want no space
)
#EMAIL LINK (if applicable)
#function to turn email into a link
func_emailLink <- function(email){
if (is.na(email)==TRUE)
{emailLink <- NA}
else {
emailLink <- paste(
"<a href='mailto:"
,email
,"'>"
,email
,"</a>"
,sep=""
)
}
return(emailLink)
}
Email <- sapply(Alumnae_ordered$Email, func_emailLink)
#CREATE WORKING TABLE
#remove columns used to make our new vectors
Alumnae_ordered$FirstName <- NULL
Alumnae_ordered$LastName <- NULL
Alumnae_ordered$Year <- NULL
Alumnae_ordered$Email <- NULL
#CREATE FINAL TABLE
Alumnae <- cbind(
Name
,Alumnae_ordered
,Email
)
#PRINT FINAL TABLE
print(
xtable(Alumnae)
,include.rownames=FALSE
,include.colnames=FALSE
,type="html"
,html.table.attributes =
""
,sanitize.text.function = getOption("xtable.sanitize.text.function", as.is)
#this DOES NOT sanitize (i.e. characters like "<" ARE NOT converted to there HTML code)
)
#only copy info between <table> </table>
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
#only copy info between <table> </table>
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
#only copy info between <table> </table>
blogdown:::serve_site()
blogdown:::serve_site()
#only copy info between <table> </table>
#only copy info between <table> </table>
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
#only copy info between <table> </table>
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
